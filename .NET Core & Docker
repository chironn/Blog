.NET Core & Docker


Docker使用说明
在Ubuntu 18.04上安装Docker

写在前面：
    目前.net core已经支持Linux系统，所以可以直接在安装.net core sdk后运行发布后的.net core应用（安装教程网址： https://www.microsoft.com/net/learn/get-started-with-dotnet-tutorial#install）
1.从Ubuntu存储库安装Docker
    如果您想从Ubuntu存储库安装docker版本，则可以运行下面的apt命令。
        sudo apt install docker.io
    等到安装完成后，您可以启动Docker并使用systemctl命令将其添加到引导时间：
        systemctl start docker
        systemctl enable docker
    检查docker版本：
        docker --version
2.从Docker存储库安装Docker
    在从Docker存储库安装docker-ce之前，使用apt命令安装一些依赖项，如下所示。
        sudo apt install \
        apt-transport-https \
        ca-certificates \
        curl \
        software-properties-common
    安装完成后，添加docker密钥和docker'nightly'存储库。
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-    key add -
        echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu     bionic nightly" > /etc/apt/sources.list.d/docker-nightly.list
    并更新存储库。
        sudo apt update
    现在docker仓库已经添加到系统中。
    使用apt-cache命令检查docker仓库提供的所有docker软件包。
        sudo apt search docker-ce
        sudo apt-cache policy docker-ce
    使用下面的apt命令安装它。
        sudo apt install docker-ce
    安装完成后，启动Docker服务并使其每次在系统启动时启动。
        systemctl start docker
        systemctl enable docker
    现在检查系统上安装的码头版本。
        docker --version
在ubuntu上配置Docker

1、拉取dotnet-sdk的最新镜像，速度慢的话请使用daocloud docker hub加速。
sudo docker pull microsoft/dotnet:latest
2、将发布之后的文件夹publish上传到服务器上
3、创建Dockerfile文件，内容配置如下：
FROM microsoft/dotnet //该命令指定了基础镜像启动构建流程
WORKDIR /app //WORKDIR命令用于设置CMD指明的命令的运行目录
COPY ./app  //从构建上下文目录中 <源路径> 的文件/目录复制到新的一层的镜像内的 <目标路径> 位置
ENTRYPOINT ["dotnet", "Intest.dll"] //配置容器启动后执行的命令，并且不可被 docker run 提供的参数覆盖
4、切换到Dockerfile所在的目录下，并执行构建命令，成功之后会有下图的提示
sudo docker build -t lightweb .　　//注意后边还有一个点
5.运行刚才构建成功的容器
sudo dokcer run -it Intest.dll
备注（run命令参数介绍）：http://www.runoob.com/docker/docker-run-command.html

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.Net Framework项目迁移.Net Core
迁移.Net Framework项目至.Net Core

  在迁移.net core的过程中，第一步就是要把.net framework 工程的目标框架改为.net core2.1（最新框架版本）
  以下是查阅到最简便的一种方式，采用通过编辑.csproj文件，强制把工程迁移到.net core下：
步骤一：通过VS2017打开.net framework 解决方案，卸载指定的项目后，打开.csproj文件。
步骤二：移除两个标签为import的引用
步骤三：移除 Release、Debug编译的配置信息
eg：（
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    </PropertyGroup>
）
步骤四：修改 Project节点属性：
    <Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    替换为
    <Project Sdk="Microsoft.NET.Sdk">
步骤五：移除TargetFrameworkVersion信息，增加信息:<TargetFramework>netcoreapp2.1</TargetFramework>
步骤六：重新加载项目
步骤七：在已经加载的 .net core项目上，继续编辑csproj文件。
步骤八：移除文件列表信息。
    eg：（
    <ItemGroup>
    <Compile Include="Entity\FromIncomBufferEntity.cs" />
    <Compile Include="Entity\FromInComEntity.cs" />
    <Compile Include="Logic\DownloadLogic.cs" />
    <Compile Include="Logic\UploadLogic.cs" />
    <Compile Include="MainService.cs" />
    <Compile Include="Parse\FromInComDownEntityParse.cs" />
    <Compile Include="Parse\FromInComUPEntityParse.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="Protocol\ProtocolParseDownload.cs" />
    <Compile Include="Protocol\ProtocolParseUpload.cs" />
    </ItemGroup>
    <ItemGroup>
    <None Include="App.config" />
    <None Include="IniFiles\communicateQueue.config">
    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Include="packages.config" />
    </ItemGroup>
    ）
步骤九：移除AssemblyInfo.cs文件。
步骤十：移除.net framework工程中隐藏的文件。因为.net core 工程不支持排除文件，所以在完成上述迁移后，原来隐藏的文件会自动添加到工程中，对这些垃圾文件，请识别后，手工删除即可。
步骤十一：重新添加nuget包引用。.net framework 对nuget包的引用信息是存储到packages.config中的。此文件已经在.net core中移除。请根据packages.config信息，在项目中重新添加nuget引用。引用信息将会自动添加到csproj文件中。
步骤十二：编译工程。

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

发布.Net Core项目
1.安装开发环境
    NET Core开发要求:
    Visual Studio 2017
    .NET Core 2.0 SDK
2.一个基于.Net Core2.0开发平台的项目
    可以新创建一个.NET Core控制台项目
    也可以将原有项目迁移至.net core开发平台
3.发布类型
    Portable applications（便携应用）：
    需要目标主机安装有.NET Core的运行时，对比现在的情况就是需要机器安装.NET Framework。
    Self-contained application（自宿主应用）：
    这种方式会将运行时与程序共同打包，也就意味着目标机器不需要装.NET Core运行时（这种方式是将Core CLR打包进去）。
    备注：
    由于自宿主应用方式需要编辑“project.json”文件，但是在.net core1.1之后，微软又回归了.csproj文件。所以目前我采用的是便携应用。
4.发布项目
    4.1使用（CLI）命令行发布
        运行“CMD”（命令提示符），定位到项目路径。
        使用发布命令 “dotnet Publish -c release”
        发布完成，可以去“release”目录中“netcoreapp2.1”文件夹下找到“publish”文件夹。
    备注：
        -f, --framework [FID]
    指定运行框架，如：netcoreapp2.1，net45，net451等，具体  由“project.json”中的“framework”节点指定。
        -r, --runtime [RID]
    指定应用程序运行时（自宿主应用），这种方式将会把指定平台的Core CLR打包进去。
    格式：[os].[version]-[arch]
    例子：win7-x64、win7-x86、win10-x64、win10-x86、rhel.7.0-x64、ubuntu.14.04-x64、osx.10.10-x64等。
        -b, --build-base-path [DIR]
    指定输出路径根。
        -o, –output
    指定具体的输出路径,会与“-b”命令配合。
    默认路径：
    Portable applications：./bin/[configuration]/[framework]//app
    Self-contained application：./bin/[configuration]/[framework]/[runtime]/app
    --version-suffix [VERSION_SUFFIX]
    替换在“project.json”文件中依赖包版本号中的*。
        -c, --configuration [Debug|Release]
    发布配置，默认为：Debug。
    4.2使用Visual Studio发布
    右键发布，可选参数请参考上面的备注内容。